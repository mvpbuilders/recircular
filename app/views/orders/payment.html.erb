<div class="container my-5">
  <div class="row">
    
    <!-- Columna izquierda: formulario de pago -->
    <div class="col-md-7">
      <h2 class="h5 mb-3">Pago de la orden #<%= @order.id %></h2>
      <p class="mb-4">Total a pagar: <strong>$<%= number_with_delimiter(@order.total_amount.to_i, delimiter: ".") %></strong></p>

      <div id="walletBrick_container" class="mb-4"></div>
      <div id="cardPaymentBrick_container" class="mb-4"></div>
      <span id="payment-error-message" style="color: red; display: none;"></span>
    </div>

    <!-- Columna derecha: resumen del pedido -->
    <div class="col-md-5">
      <div class="card p-4 rounded shadow-sm">
        <h4 class="mb-4">Resumen del pedido</h4>

        <% @order.order_items.each do |item| %>
          <div class="d-flex align-items-center mb-3">
            <% if item.product.images.attached? %>
              <%= image_tag url_for(item.product.images.first), class: "rounded me-3", style: "width: 64px; height: 64px; object-fit: cover;" %>
            <% end %>
            <div>
              <strong><%= item.product.title %></strong><br>
              <span class="text-muted">$<%= number_with_delimiter(item.product.precio.to_i, delimiter: ".") %></span>
            </div>
          </div>
        <% end %>

        <hr>
        <p class="mb-1"><strong>Env√≠o:</strong> Incluido</p>
        <p class="h5 mt-2"><strong>Total:</strong> $<%= number_with_delimiter(@order.total_amount.to_i, delimiter: ".") %></p>
      </div>
    </div>

  </div>
</div>

<script src="https://sdk.mercadopago.com/js/v2"></script>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const mp = new MercadoPago('<%= @public_key %>', { locale: 'es-AR' });
    const bricksBuilder = mp.bricks();

    const renderWalletBrick = async () => {
      const settings = {
        initialization: { redirectMode: 'self' },
        callbacks: {
          onReady: () => console.log("Wallet listo"),
          onSubmit: (formData) => {
            return new Promise((resolve, reject) => {
              fetch('/orders/<%= @order.id %>/create_preference', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'X-CSRF-Token': "<%= form_authenticity_token %>"
                },
                body: JSON.stringify(formData)
              })
              .then(response => response.json())
              .then(data => resolve(data.preference_id))
              .catch(error => {
                console.error("Error en create_preference", error);
                reject();
              });
            });
          },
          onError: (error) => console.error("Error en Wallet", error),
        }
      };
      await bricksBuilder.create('wallet', 'walletBrick_container', settings);
    };

    const renderCardPaymentBrick = async () => {
      const settings = {
        initialization: {
          amount: <%= @order.total_amount.to_i %>,
          payer: { email: "" }
        },
        callbacks: {
          onReady: () => console.log("Card listo"),
          onSubmit: (cardFormData) => {
            return new Promise((resolve, reject) => {
              fetch('/orders/<%= @order.id %>/process_payment', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'X-CSRF-Token': "<%= form_authenticity_token %>"
                },
                body: JSON.stringify(cardFormData)
              })
              .then(res => res.json())
              .then(data => {
                if (data.success) {
                  window.location.href = data.redirect_url || "/";
                  resolve();
                } else {
                  const errorMsg = document.getElementById('payment-error-message');
                  if (errorMsg) {
                    errorMsg.textContent = 'Error: ' + data.message;
                    errorMsg.style.display = 'block';
                  }
                  reject();
                }
              })
              .catch(error => {
                console.error("Error en process_payment", error);
                reject();
              });
            });
          },
          onError: (error) => console.error("Error en Card", error),
        }
      };
      await bricksBuilder.create('cardPayment', 'cardPaymentBrick_container', settings);
    };

    // renderWalletBrick();
    renderCardPaymentBrick();
  });
</script>
